const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

// Railway –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const railwayPool = new Pool({
  connectionString: 'postgresql://postgres:CyBafKYUrbExtogaBgDIyDEPJLBIEkqk@switchyard.proxy.rlwy.net:25770/railway',
  ssl: { rejectUnauthorized: false }
});

async function createTables() {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Railway...');
  
  const client = await railwayPool.connect();
  
  try {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        full_name VARCHAR(100) NOT NULL,
        role VARCHAR(20) NOT NULL DEFAULT 'driver',
        email VARCHAR(100),
        phone VARCHAR(20),
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');

    // –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
    await client.query(`
      CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        date DATE NOT NULL,
        direction TEXT NOT NULL,
        distance DECIMAL(10,2),
        weight DECIMAL(10,2),
        amount DECIMAL(10,2),
        company VARCHAR(100),
        client_name VARCHAR(100),
        phone VARCHAR(20),
        email VARCHAR(100),
        driver_id INTEGER REFERENCES users(id),
        status VARCHAR(20) DEFAULT 'new',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å–æ–∑–¥–∞–Ω–∞');

    // –¢–∞–±–ª–∏—Ü–∞ –º–∞—à–∏–Ω
    await client.query(`
      CREATE TABLE IF NOT EXISTS vehicles (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        model VARCHAR(100),
        plate_number VARCHAR(20) UNIQUE,
        driver_id INTEGER REFERENCES users(id),
        is_active BOOLEAN DEFAULT true,
        mileage INTEGER,
        last_service_date DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ vehicles —Å–æ–∑–¥–∞–Ω–∞');

    // –¢–∞–±–ª–∏—Ü–∞ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    await client.query(`
      CREATE TABLE IF NOT EXISTS gps_tracking (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        latitude DECIMAL(10,8) NOT NULL,
        longitude DECIMAL(10,8) NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        speed DECIMAL(5,2),
        heading INTEGER,
        accuracy DECIMAL(5,2)
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ gps_tracking —Å–æ–∑–¥–∞–Ω–∞');

    // –¢–∞–±–ª–∏—Ü–∞ —É—á–µ—Ç–∞ (—Ä–∞—Å—Ö–æ–¥—ã, —Ç–æ–ø–ª–∏–≤–æ, –ø–æ–ª–æ–º–∫–∏, –¢–û)
    await client.query(`
      CREATE TABLE IF NOT EXISTS accounting (
        id SERIAL PRIMARY KEY,
        type VARCHAR(50) NOT NULL,
        vehicle_id INTEGER REFERENCES vehicles(id),
        date DATE NOT NULL,
        amount DECIMAL(10,2) NOT NULL,
        description TEXT NOT NULL,
        category VARCHAR(100),
        mileage INTEGER,
        created_by INTEGER REFERENCES users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ accounting —Å–æ–∑–¥–∞–Ω–∞');

    // –ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è/–ø—Ä–æ–±–µ–≥–∞
    await client.query(`
      CREATE TABLE IF NOT EXISTS vehicle_maintenance_history (
        id SERIAL PRIMARY KEY,
        vehicle_id INTEGER REFERENCES vehicles(id) ON DELETE CASCADE,
        mileage INTEGER,
        service_date DATE NOT NULL,
        service_type VARCHAR(100) NOT NULL,
        description TEXT,
        cost DECIMAL(10,2),
        next_service_mileage INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ vehicle_maintenance_history —Å–æ–∑–¥–∞–Ω–∞');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await client.query(`ALTER TABLE vehicles ADD COLUMN IF NOT EXISTS mileage INTEGER`);
    await client.query(`ALTER TABLE vehicles ADD COLUMN IF NOT EXISTS last_service_date DATE`);

    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err.message);
    throw err;
  } finally {
    client.release();
  }
}

async function initData() {
  console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Railway...');
  
  try {
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
    const adminPasswordHash = await bcrypt.hash('admin', 10);
    const driverPasswordHash = await bcrypt.hash('driver123', 10);
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminQuery = `
      INSERT INTO users (username, password, email, role, full_name, phone, created_at) 
      VALUES ($1, $2, $3, $4, $5, $6, NOW())
      ON CONFLICT (username) DO NOTHING
    `;
    
    await railwayPool.query(adminQuery, [
      'admin',
      adminPasswordHash,
      'admin@52express.com',
      'admin',
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      '+7 (999) 123-45-67'
    ]);
    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (admin/admin)');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    const driverQuery = `
      INSERT INTO users (username, password, email, role, full_name, phone, created_at) 
      VALUES ($1, $2, $3, $4, $5, $6, NOW())
      ON CONFLICT (username) DO NOTHING
    `;
    
    await railwayPool.query(driverQuery, [
      'driver1',
      driverPasswordHash,
      'driver@52express.com',
      'driver',
      '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      '+7 (999) 234-56-78'
    ]);
    console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω (driver1/driver123)');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    const vehicles = [
      {
        name: '–ì–ê–ó–µ–ª—å NEXT',
        model: '–ì–ê–ó-3302',
        plate_number: '–ê123–ë–í777',
        mileage: 50000
      },
      {
        name: '–ö–ê–ú–ê–ó 5320',
        model: '5320',
        plate_number: '–í456–ì–î777',
        mileage: 120000
      },
      {
        name: '–ú–ê–ó 6312',
        model: '6312',
        plate_number: '–°789–ï–ñ777',
        mileage: 80000
      }
    ];
    
    for (const vehicle of vehicles) {
      const vehicleQuery = `
        INSERT INTO vehicles (name, model, plate_number, mileage, created_at) 
        VALUES ($1, $2, $3, $4, NOW())
        ON CONFLICT (plate_number) DO NOTHING
      `;
      
      await railwayPool.query(vehicleQuery, [
        vehicle.name,
        vehicle.model,
        vehicle.plate_number,
        vehicle.mileage
      ]);
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    const orders = [
      {
        date: new Date(),
        direction: '–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        distance: 635,
        weight: 500,
        amount: 25000,
        company: '–û–û–û "–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞"',
        client_name: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
        phone: '+7 (495) 123-45-67',
        email: 'ivanov@company.com',
        status: 'pending'
      },
      {
        date: new Date(),
        direction: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ - –ú–æ—Å–∫–≤–∞',
        distance: 635,
        weight: 200,
        amount: 18000,
        company: '–ò–ü –°–∏–¥–æ—Ä–æ–≤',
        client_name: '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
        phone: '+7 (812) 234-56-78',
        email: 'sidorov@mail.ru',
        status: 'in_progress'
      }
    ];
    
    for (const order of orders) {
      const orderQuery = `
        INSERT INTO orders (date, direction, distance, weight, amount, company, 
                           client_name, phone, email, status, created_at) 
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW())
      `;
      
      await railwayPool.query(orderQuery, [
        order.date,
        order.direction,
        order.distance,
        order.weight,
        order.amount,
        order.company,
        order.client_name,
        order.phone,
        order.email,
        order.status
      ]);
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    const expenses = [
      {
        type: 'fuel',
        amount: 5000,
        description: '–ó–∞–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø–ª–∏–≤–æ–º',
        date: new Date()
      },
      {
        type: 'maintenance',
        amount: 15000,
        description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        date: new Date()
      }
    ];
    
    for (const expense of expenses) {
      const expenseQuery = `
        INSERT INTO accounting (type, amount, description, date, created_at) 
        VALUES ($1, $2, $3, $4, NOW())
      `;
      
      await railwayPool.query(expenseQuery, [
        expense.type,
        expense.amount,
        expense.description,
        expense.date
      ]);
    }
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin');
    console.log('   –í–æ–¥–∏—Ç–µ–ª—å: driver1 / driver123');
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err.message);
    throw err;
  }
}

async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway...');
    await railwayPool.query('SELECT 1');
    console.log('‚úÖ Railway –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await createTables();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await initData();
    
    console.log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', err.message);
  } finally {
    await railwayPool.end();
  }
}

main();
