const axios = require('axios');
const { google } = require('googleapis');

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
 * @param {string} emailAddress - email –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} routeInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
 * @param {Object} orderData - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 */
async function sendTelegramNotification(emailAddress, routeInfo, orderData = {}) {
  try {
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '-1002419921277';
    const THREAD_ID = process.env.TELEGRAM_THREAD_ID || '12493';

    if (!TELEGRAM_BOT_TOKEN || !CHAT_ID) {
      console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return { success: false, error: 'Telegram credentials not configured' };
    }

    const message = {
      chat_id: CHAT_ID,
      message_thread_id: THREAD_ID,
      text: `‚úÖ **–ó–ê–Ø–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê**\n\nüìß **Email –∫–ª–∏–µ–Ω—Ç–∞:** ${emailAddress}\nüõ£Ô∏è **–ú–∞—Ä—à—Ä—É—Ç:** ${routeInfo}\nüìÖ **–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${new Date().toLocaleDateString('ru-RU')}\n${orderData.orderId ? `üÜî **ID –∑–∞—è–≤–∫–∏:** ${orderData.orderId}` : ''}\n${orderData.company ? `üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** ${orderData.company}` : ''}\n${orderData.clientName ? `üë§ **–ö–ª–∏–µ–Ω—Ç:** ${orderData.clientName}` : ''}\n${orderData.phone ? `üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** ${orderData.phone}` : ''}\n\nüìß **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É**`,
      parse_mode: 'Markdown'
    };

    console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ –≤ Telegram:', {
      emailAddress,
      routeInfo,
      orderId: orderData.orderId
    });

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API:', {
      url: telegramUrl,
      message: message
    });
    
    const response = await axios.post(telegramUrl, message, {
      timeout: 15000,
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', {
      status: response.status,
      data: response.data
    });

    if (response.data.ok) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      return { success: true, messageId: response.data.result.message_id };
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', response.data);
      return { success: false, error: response.data.description || 'Unknown error' };
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Gmail API
 * @param {string} emailAddress - email –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} routeInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
 * @param {Object} orderData - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 */
async function sendRecommendationEmail(emailAddress, routeInfo, orderData = {}) {
  try {
    const GMAIL_CLIENT_ID = process.env.GMAIL_CLIENT_ID;
    const GMAIL_CLIENT_SECRET = process.env.GMAIL_CLIENT_SECRET;
    const GMAIL_REFRESH_TOKEN = process.env.GMAIL_REFRESH_TOKEN;
    const GMAIL_USER_EMAIL = process.env.GMAIL_USER_EMAIL || 'gruzoperevozki436@gmail.com';

    if (!GMAIL_CLIENT_ID || !GMAIL_CLIENT_SECRET || !GMAIL_REFRESH_TOKEN) {
      console.log('‚ö†Ô∏è Gmail API credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      return { success: false, error: 'Gmail API credentials not configured' };
    }

    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Gmail API:', {
      emailAddress,
      routeInfo,
      orderId: orderData.orderId,
      fromEmail: GMAIL_USER_EMAIL
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth2 –∫–ª–∏–µ–Ω—Ç–∞
    const oauth2Client = new google.auth.OAuth2(
      GMAIL_CLIENT_ID,
      GMAIL_CLIENT_SECRET,
      'urn:ietf:wg:oauth:2.0:oob'
    );

    oauth2Client.setCredentials({
      refresh_token: GMAIL_REFRESH_TOKEN
    });

    const gmail = google.gmail({ version: 'v1', auth: oauth2Client });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–∏—Å—å–º–∞
    try {
      const profile = await gmail.users.getProfile({ userId: 'me' });
      console.log('üìß Gmail –ø—Ä–æ—Ñ–∏–ª—å:', {
        emailAddress: profile.data.emailAddress,
        expectedEmail: GMAIL_USER_EMAIL,
        match: profile.data.emailAddress === GMAIL_USER_EMAIL
      });
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Gmail:', error.message);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ email —Å–æ–æ–±—â–µ–Ω–∏—è
    const emailSubject = `–ó–∞—è–≤–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É ${routeInfo} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`;
    const emailBody = `
    <html>
        <body>
            <p>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.</p>
            <p>–ó–∞—è–≤–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É <strong>"${routeInfo}"</strong> –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –æ–ø–ª–∞—Ç—É –æ—Ç –í–∞—Å –ø–æ–ª—É—á–∏–ª–∏.</p>
            <br>
            <p><strong>–ü—Ä–æ—Å–∏–º –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ ATI - <a href="https://ati.su/firms/5308606">https://ati.su/firms/5308606</a>, —Ç–∞–∫ –∂–µ –æ—Ç –Ω–∞—Å –ø–æ—Å–ª–µ–¥—É–µ—Ç –æ—Ç–≤–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.</strong></p>
            <br>
            <p>–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –í–∞–º –∏ –í–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É.</p>
            <p><strong>–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ "52 EXPRESS"</strong></p>
        </body>
    </html>
    `;

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–∏—Å—å–º–∞ –≤ UTF-8
    const encodedSubject = `=?UTF-8?B?${Buffer.from(emailSubject, 'utf8').toString('base64')}?=`;

    // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ email –≤ base64
    const emailLines = [
      `From: 52 EXPRESS <${GMAIL_USER_EMAIL}>`,
      `To: ${emailAddress}`,
      `Subject: ${encodedSubject}`,
      'Content-Type: text/html; charset=utf-8',
      'MIME-Version: 1.0',
      '',
      emailBody
    ];

    const email = emailLines.join('\r\n');
    const encodedEmail = Buffer.from(email).toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ Gmail API:', {
      to: emailAddress,
      subject: emailSubject
    });
    
    const result = await gmail.users.messages.send({
      userId: 'me',
      requestBody: {
        raw: encodedEmail
      }
    });

    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Gmail API:', {
      messageId: result.data.id,
      result: result.data
    });

    console.log('‚úÖ Email —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Gmail API');
    return { success: true, messageId: result.data.id };

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email —á–µ—Ä–µ–∑ Gmail API:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
 * @param {string} emailAddress - email –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} routeInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
 * @param {Object} orderData - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 */
async function sendCompletionNotification(emailAddress, routeInfo, orderData = {}) {
  try {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', {
      TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      TELEGRAM_CHAT_ID: process.env.TELEGRAM_CHAT_ID || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      TELEGRAM_THREAD_ID: process.env.TELEGRAM_THREAD_ID || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      GMAIL_CLIENT_ID: process.env.GMAIL_CLIENT_ID ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      GMAIL_CLIENT_SECRET: process.env.GMAIL_CLIENT_SECRET ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      GMAIL_REFRESH_TOKEN: process.env.GMAIL_REFRESH_TOKEN ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      GMAIL_USER_EMAIL: process.env.GMAIL_USER_EMAIL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      PYTHON_BOT_SERVER: process.env.PYTHON_BOT_SERVER || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const telegramResult = await sendTelegramNotification(emailAddress, routeInfo, orderData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
    const emailResult = await sendRecommendationEmail(emailAddress, routeInfo, orderData);

    return {
      success: telegramResult.success && emailResult.success,
      telegram: telegramResult,
      email: emailResult
    };
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 * @param {string} emailAddress - email –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} routeInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
 * @param {Object} orderData - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 */
async function sendCompletionEmail(emailAddress, routeInfo, orderData = {}) {
  return await sendCompletionNotification(emailAddress, routeInfo, orderData);
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API
 */
async function testTelegramAPI() {
  try {
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '-1002419921277';
    const THREAD_ID = process.env.TELEGRAM_THREAD_ID || '12493';

    if (!TELEGRAM_BOT_TOKEN) {
      console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return { success: false, error: 'TELEGRAM_BOT_TOKEN not configured' };
    }

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram API...');
    console.log('üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', { CHAT_ID, THREAD_ID });

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfoUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`;
    const botInfoResponse = await axios.get(botInfoUrl);
    console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfoResponse.data);

    // –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    const chatInfoUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getChat`;
    const chatInfoResponse = await axios.post(chatInfoUrl, { chat_id: CHAT_ID });
    console.log('üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:', chatInfoResponse.data);

    // –û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = {
      chat_id: CHAT_ID,
      message_thread_id: THREAD_ID,
      text: 'üß™ –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞',
      parse_mode: 'Markdown'
    };

    const testUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const testResponse = await axios.post(testUrl, testMessage);
    console.log('üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', testResponse.data);

    return { success: true, data: testResponse.data };
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram API:', error.response?.data || error.message);
    return { success: false, error: error.response?.data || error.message };
  }
}

module.exports = {
  sendCompletionNotification,
  sendCompletionEmail,
  sendTelegramNotification,
  sendRecommendationEmail,
  testTelegramAPI
};