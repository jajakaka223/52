#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—è–≤–æ–∫ 52 EXPRESS
"""

import requests
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TransportAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url
        self.api_key = api_key
        self.headers = {
            'Content-Type': 'application/json',
            'X-API-Key': api_key
        }
    
    def create_order(self, order_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        try:
            response = requests.post(
                f"{self.base_url}/order",
                headers=self.headers,
                json=order_data,
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            raise
    
    def get_order_status(self, order_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        try:
            response = requests.get(
                f"{self.base_url}/order/{order_id}/status",
                headers=self.headers,
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {order_id}: {e}")
            raise
    
    def get_orders(self, start_date: Optional[str] = None, 
                   end_date: Optional[str] = None, 
                   status: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        try:
            params = {}
            if start_date:
                params['start_date'] = start_date
            if end_date:
                params['end_date'] = end_date
            if status:
                params['status'] = status
            
            response = requests.get(
                f"{self.base_url}/orders",
                headers=self.headers,
                params=params,
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")
            raise

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å python-telegram-bot
def example_telegram_bot():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å python-telegram-bot"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    API_BASE_URL = "http://localhost:3000/api/telegram"
    API_KEY = "your_telegram_api_key_here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    transport_api = TransportAPI(API_BASE_URL, API_KEY)
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new_order
    def handle_new_order(update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥
            
            order_data = {
                "date": datetime.now().strftime("%Y-%m-%d"),
                "direction": "–ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "distance": 635.5,  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "weight": 2.5,  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "amount": 15000,  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "company": "–û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞",  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "clientName": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "phone": "+7 (999) 123-45-67",  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "email": "client@example.com"  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            result = transport_api.create_order(order_data)
            
            if result.get('success'):
                order = result['order']
                message = f"""
‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {order['id']}
üìÖ –î–∞—Ç–∞: {order['date']}
üöõ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order['direction']}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {order['company']}
üë§ –ö–ª–∏–µ–Ω—Ç: {order['client_name']}
üìä –°—Ç–∞—Ç—É—Å: {order['status']}
                """
                update.message.reply_text(message)
            else:
                update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_new_order: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
    def handle_status(update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        try:
            if not context.args:
                update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")
                return
            
            order_id = int(context.args[0])
            result = transport_api.get_order_status(order_id)
            
            if result.get('success'):
                order = result['order']
                message = f"""
üìã –ó–∞—è–≤–∫–∞ #{order['id']}

üöõ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order['direction']}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {order['company']}
üë§ –ö–ª–∏–µ–Ω—Ç: {order['client_name']}
üìä –°—Ç–∞—Ç—É—Å: {order['status']}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {order['created_at']}
                """
                update.message.reply_text(message)
            else:
                update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except ValueError:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_status: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /orders
    def handle_orders(update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
        try:
            result = transport_api.get_orders()
            
            if result.get('success') and result.get('orders'):
                orders = result['orders']
                message = f"üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ({len(orders)} —à—Ç.):\n\n"
                
                for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    message += f"#{order['id']} - {order['direction']} - {order['status']}\n"
                
                if len(orders) > 10:
                    message += f"\n... –∏ –µ—â–µ {len(orders) - 10} –∑–∞—è–≤–æ–∫"
                
                update.message.reply_text(message)
            else:
                update.message.reply_text("üìã –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_orders: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")
    
    # –ó–¥–µ—Å—å –±—ã –±—ã–ª –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å python-telegram-bot
    # from telegram.ext import Application, CommandHandler
    # 
    # application = Application.builder().token("YOUR_BOT_TOKEN").build()
    # 
    # application.add_handler(CommandHandler("new_order", handle_new_order))
    # application.add_handler(CommandHandler("status", handle_status))
    # application.add_handler(CommandHandler("orders", handle_orders))
    # 
    # application.run_polling()

# –ü—Ä–∏–º–µ—Ä –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
def example_direct_usage():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –±–µ–∑ Telegram –±–æ—Ç–∞"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    API_BASE_URL = "http://localhost:3000/api/telegram"
    API_KEY = "your_telegram_api_key_here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    transport_api = TransportAPI(API_BASE_URL, API_KEY)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        order_data = {
            "date": "2024-01-15",
            "direction": "–ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "distance": 635.5,
            "weight": 2.5,
            "amount": 15000,
            "company": "–û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞",
            "clientName": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            "phone": "+7 (999) 123-45-67",
            "email": "client@example.com"
        }
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...")
        result = transport_api.create_order(order_data)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
        if result.get('success'):
            order_id = result['order']['id']
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            print(f"\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{order_id}...")
            status_result = transport_api.get_order_status(order_id)
            print(f"–°—Ç–∞—Ç—É—Å: {json.dumps(status_result, indent=2, ensure_ascii=False)}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
            print("\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫...")
            orders_result = transport_api.get_orders()
            print(f"–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫: {json.dumps(orders_result, indent=2, ensure_ascii=False)}")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
    print("=" * 50)
    example_direct_usage()
