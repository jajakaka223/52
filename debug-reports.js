const { pool } = require('./config/database');

async function debugReports() {
  try {
    console.log('üìä –û—Ç–ª–∞–¥–∫–∞ API –æ—Ç—á–µ—Ç–æ–≤...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å orders-by-date —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —á—Ç–æ –≤ –æ—à–∏–±–∫–µ
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/reports/orders-by-date —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:');
    console.log('   startDate: 2025-09-01');
    console.log('   endDate: 2025-09-14');
    
    const result = await pool.query(`
      SELECT 
        DATE(o.date) as period,
        COUNT(*) as total_orders,
        COUNT(CASE WHEN o.status = 'completed' THEN 1 END) as completed_orders,
        SUM(CASE WHEN o.status = 'completed' THEN o.amount ELSE 0 END) as revenue,
        SUM(CASE WHEN o.status NOT IN ('completed','cancelled') THEN o.amount ELSE 0 END) as expected_revenue,
        AVG(CASE WHEN o.status = 'completed' THEN o.amount ELSE NULL END) as avg_amount
      FROM orders o
      WHERE o.date BETWEEN $1 AND $2
      GROUP BY DATE(o.date)
      ORDER BY period ASC
    `, ['2025-09-01', '2025-09-14']);
    
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å orders-by-date –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.rows);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∏ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
    const allOrders = await pool.query(`
      SELECT id, date, status, amount 
      FROM orders 
      WHERE date BETWEEN $1 AND $2
      ORDER BY date
    `, ['2025-09-01', '2025-09-14']);
    
    console.log('üìã –ó–∞—è–≤–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç:', allOrders.rows);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    const allOrdersCount = await pool.query('SELECT COUNT(*) as count FROM orders');
    console.log('üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ:', allOrdersCount.rows[0].count);
    
    const allOrdersList = await pool.query('SELECT id, date, status FROM orders ORDER BY date DESC LIMIT 5');
    console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫:', allOrdersList.rows);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  } finally {
    await pool.end();
  }
}

debugReports();
