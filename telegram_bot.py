#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import requests
import json
from datetime import datetime
from typing import Dict, Optional, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "7569282805:AAFQHAX-moIoTpVSLvNpOXWtrVbwepr31iE"
API_BASE_URL = "https://web-production-7cfec.up.railway.app"
ADMIN_USERNAME = "admin"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞
ADMIN_PASSWORD = "admin"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞

class TelegramBot:
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.api_base = API_BASE_URL
        self.auth_token = None
        
    def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            response = requests.post(f"{self.api_base}/api/auth/login", json={
                "username": ADMIN_USERNAME,
                "password": ADMIN_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get('token')
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
    
    def parse_order(self, text: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ Telegram"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            direction_match = re.search(r'–ì—Ä—É–∑:\s*([^‚Üí]+)‚Üí\s*([^\n]+)', text)
            if not direction_match:
                return None
            
            from_city = direction_match.group(1).strip()
            to_city = direction_match.group(2).strip()
            direction = f"{from_city} ‚Üí {to_city}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
            weight_match = re.search(r'(\d+\.?\d*)\s*—Ç', text)
            weight = float(weight_match.group(1)) if weight_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–µ–∑ –ù–î–°, –∑–∞—Ç–µ–º —Å –ù–î–°)
            amount = None
            amount_match = re.search(r'(\d+)\s*—Ä—É–±\s*–ë–µ–∑ –ù–î–°', text)
            if not amount_match:
                amount_match = re.search(r'(\d+)\s*—Ä—É–±\s*–° –ù–î–°', text)
            if amount_match:
                amount = float(amount_match.group(1))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            company_match = re.search(r'–§–ò–†–ú–ê:\s*([^\n]+)', text)
            company = company_match.group(1).strip() if company_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–∏—â–µ–º –∏–º—è –ø–µ—Ä–µ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)
            name_match = re.search(r'—Ä–µ–π—Ç–∏–Ω–≥:[^\n]*\n([–ê-–Ø–∞-—è—ë–Å\s]+)\s*\n—Ç–µ–ª:', text)
            client_name = name_match.group(1).strip() if name_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            phone_match = re.search(r'—Ç–µ–ª:\s*([+\d\s\(\)\-]+)', text)
            phone = phone_match.group(1).strip() if phone_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º email
            email_match = re.search(r'e-mail:\s*([^\s]+)', text)
            email = email_match.group(1).strip() if email_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã (–≤ –∫–æ–Ω—Ü–µ)
            vehicle_match = re.search(r'(\d{3})\s*$', text.strip())
            vehicle_number = vehicle_match.group(1) if vehicle_match else None
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
            details = []
            if weight:
                details.append(f"–í–µ—Å: {weight} —Ç")
            if vehicle_number:
                details.append(f"–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {vehicle_number}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ
            cargo_match = re.search(r'([–ê-–Ø–∞-—è—ë–Å\s,]+)', text)
            if cargo_match and '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã' in text:
                details.append("–ì—Ä—É–∑: –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
            
            details_text = "\n".join(details) if details else "–î–µ—Ç–∞–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
            
            return {
                "date": datetime.now().strftime("%Y-%m-%d"),
                "direction": direction,
                "weight": weight,
                "amount": amount,
                "company": company,
                "clientName": client_name,
                "phone": phone,
                "email": email,
                "details": details_text
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    def create_order(self, order_data: Dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API"""
        try:
            headers = {
                "Authorization": f"Bearer {self.auth_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(
                f"{self.api_base}/api/orders",
                json=order_data,
                headers=headers
            )
            
            if response.status_code in [200, 201]:
                data = response.json()
                order_id = data.get('order', {}).get('id') if 'order' in data else data.get('id')
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {order_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def send_message(self, chat_id: str, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            requests.post(f"{self.api_url}/sendMessage", json={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def process_message(self, message: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            chat_id = str(message["chat"]["id"])
            text = message.get("text", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—è–≤–∫—É
            if "–ì—Ä—É–∑:" in text and "‚Üí" in text:
                print(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç {chat_id}")
                
                # –ü–∞—Ä—Å–∏–º –∑–∞—è–≤–∫—É
                order_data = self.parse_order(text)
                if not order_data:
                    self.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
                if self.create_order(order_data):
                    response_text = f"""‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>

üìã <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order_data['direction']}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {order_data['company'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['clientName'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß <b>Email:</b> {order_data['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚öñÔ∏è <b>–í–µ—Å:</b> {order_data['weight'] or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Ç
üí∞ <b>–°—É–º–º–∞:</b> {order_data['amount'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±

<i>–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.</i>"""
                else:
                    response_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                self.send_message(chat_id, response_text)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                help_text = """ü§ñ <b>–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ì—Ä—É–∑: –ò–∂–µ–≤—Å–∫ ‚Üí –í–ª–∞–¥–∏–º–∏—Ä

RUS, 1005 –∫–º
‚Ä¢ –ò–∂–µ–≤—Å–∫, –†–æ—Å—Å–∏—è, 12 —Å–µ–Ω, –ø—Ç
‚Ä¢ –í–ª–∞–¥–∏–º–∏—Ä (235 –∫–º –æ—Ç –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –†–æ—Å—Å–∏—è), –†–æ—Å—Å–∏—è

2.6 —Ç / - 
–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–∞–ª–µ—Ç—ã ‚Äî 5 —à—Ç., –≤–æ–∑–º.–¥–æ–≥—Ä—É–∑

–í—Å–µ –∑–∞–∫—Ä.+–∏–∑–æ—Ç–µ—Ä–º
–ó–∞–≥—Ä—É–∑–∫–∞, –≤—ã–≥—Ä—É–∑–∫–∞: –∑–∞–¥–Ω—è—è

20000 —Ä—É–±  –° –ù–î–° (19.9 —Ä—É–±/–∫–º)
16000 —Ä—É–±  –ë–µ–∑ –ù–î–° (15.9 —Ä—É–±/–∫–º)
–ë–µ–∑ —Ç–æ—Ä–≥–∞

–§–ò–†–ú–ê: –ì–ö –ò–∂—Å–∏–Ω—Ç–µ–∑ (–°–æ–ª–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞, –û–û–û), –ò–∂–µ–≤—Å–∫
–ö–æ–¥ –≤ ATI.SU: 453700
—Ä–µ–π—Ç–∏–Ω–≥: 5 , —Ä131

–ê–Ω–¥—Ä–µ–π 
—Ç–µ–ª: +7(909)0607745 –ë–∏–ª–∞–π–Ω
—Ç–µ–ª: +7(912)7425245 –ú–¢–°
e-mail: miroshkin.av@izhsintez.ru
—Ñ–∞–∫—Å +7 (3412) 507607

–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–∑:
https://loads.ati.su/loadinfo/49e65551-a7a9-4af9-815f-84d269dbcda0?utm_source=atiapp
791</code>

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç:
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –í–µ—Å
‚Ä¢ –°—É–º–º—É
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—é
‚Ä¢ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ Email
‚Ä¢ –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã"""
                
                self.send_message(chat_id, help_text)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def get_updates(self, offset: int = 0):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            response = requests.get(f"{self.api_url}/getUpdates", params={
                "offset": offset,
                "timeout": 30
            })
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not self.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        
        last_update_id = 0
        
        while True:
            try:
                updates = self.get_updates(last_update_id)
                if not updates or not updates.get("ok"):
                    continue
                
                for update in updates.get("result", []):
                    last_update_id = update["update_id"] + 1
                    
                    if "message" in update:
                        self.process_message(update["message"])
                
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                continue

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()
