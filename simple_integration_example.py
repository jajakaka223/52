#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
"""

import requests
import re
from datetime import datetime

# ===== –ù–ê–°–¢–†–û–ô–ö–ò API =====
API_URL = "https://web-production-7cfec.up.railway.app"
API_USERNAME = "admin"
API_PASSWORD = "admin"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
auth_token = None

def authenticate_api():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API"""
    global auth_token
    try:
        response = requests.post(f"{API_URL}/api/auth/login", json={
            "username": API_USERNAME,
            "password": API_PASSWORD
        })
        
        if response.status_code == 200:
            data = response.json()
            auth_token = data.get('token')
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def parse_telegram_order(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ Telegram"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction_match = re.search(r'–ì—Ä—É–∑:\s*([^‚Üí]+)‚Üí\s*([^\n]+)', text)
        if not direction_match:
            return None
        
        from_city = direction_match.group(1).strip()
        to_city = direction_match.group(2).strip()
        direction = f"{from_city} ‚Üí {to_city}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
        weight_match = re.search(r'(\d+\.?\d*)\s*—Ç', text)
        weight = float(weight_match.group(1)) if weight_match else None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–µ–∑ –ù–î–°, –∑–∞—Ç–µ–º —Å –ù–î–°)
        amount = None
        amount_match = re.search(r'(\d+)\s*—Ä—É–±\s*–ë–µ–∑ –ù–î–°', text)
        if not amount_match:
            amount_match = re.search(r'(\d+)\s*—Ä—É–±\s*–° –ù–î–°', text)
        if amount_match:
            amount = float(amount_match.group(1))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
        company_match = re.search(r'–§–ò–†–ú–ê:\s*([^\n]+)', text)
        company = company_match.group(1).strip() if company_match else None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        name_match = re.search(r'—Ä–µ–π—Ç–∏–Ω–≥:[^\n]*\n([–ê-–Ø–∞-—è—ë–Å\s]+)\s*\n—Ç–µ–ª:', text)
        client_name = name_match.group(1).strip() if name_match else None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        phone_match = re.search(r'—Ç–µ–ª:\s*([+\d\s\(\)\-]+)', text)
        phone = phone_match.group(1).strip() if phone_match else None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º email
        email_match = re.search(r'e-mail:\s*([^\s]+)', text)
        email = email_match.group(1).strip() if email_match else None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã (–≤ –∫–æ–Ω—Ü–µ)
        vehicle_match = re.search(r'(\d{3})\s*$', text.strip())
        vehicle_number = vehicle_match.group(1) if vehicle_match else None
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
        details = []
        if weight:
            details.append(f"–í–µ—Å: {weight} —Ç")
        if vehicle_number:
            details.append(f"–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {vehicle_number}")
        if '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã' in text:
            details.append("–ì—Ä—É–∑: –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        
        details_text = "\n".join(details) if details else "–î–µ—Ç–∞–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        return {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "direction": direction,
            "weight": weight,
            "amount": amount,
            "company": company,
            "clientName": client_name,
            "phone": phone,
            "email": email,
            "details": details_text
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏: {e}")
        return None

def create_order_in_app(order_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    global auth_token
    
    if not auth_token:
        if not authenticate_api():
            return False
    
    try:
        headers = {
            "Authorization": f"Bearer {auth_token}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(
            f"{API_URL}/api/orders",
            json=order_data,
            headers=headers
        )
        
        if response.status_code in [200, 201]:
            data = response.json()
            order_id = data.get('order', {}).get('id') if 'order' in data else data.get('id')
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {order_id}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False

# ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –í–ê–®–ò–ú –ë–û–¢–û–ú =====
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

def handle_telegram_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram (–¥–æ–±–∞–≤—å—Ç–µ –≤ –≤–∞—à –±–æ—Ç)"""
    text = message.get("text", "")
    chat_id = message["chat"]["id"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—è–≤–∫—É
    if "–ì—Ä—É–∑:" in text and "‚Üí" in text:
        print(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç {chat_id}")
        
        # –ü–∞—Ä—Å–∏–º –∑–∞—è–≤–∫—É
        order_data = parse_telegram_order(text)
        if not order_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏)
            # bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        if create_order_in_app(order_data):
            response_text = f"""‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>

üìã <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order_data['direction']}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {order_data['company'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['clientName'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß <b>Email:</b> {order_data['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚öñÔ∏è <b>–í–µ—Å:</b> {order_data['weight'] or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Ç
üí∞ <b>–°—É–º–º–∞:</b> {order_data['amount'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±

<i>–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.</i>"""
        else:
            response_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        # bot.send_message(chat_id, response_text, parse_mode='HTML')

# ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    test_text = """–ì—Ä—É–∑: –ò–∂–µ–≤—Å–∫ ‚Üí –í–ª–∞–¥–∏–º–∏—Ä

RUS, 1005 –∫–º
‚Ä¢ –ò–∂–µ–≤—Å–∫, –†–æ—Å—Å–∏—è, 12 —Å–µ–Ω, –ø—Ç
‚Ä¢ –í–ª–∞–¥–∏–º–∏—Ä (235 –∫–º –æ—Ç –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –†–æ—Å—Å–∏—è), –†–æ—Å—Å–∏—è

2.6 —Ç / - 
–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–∞–ª–µ—Ç—ã ‚Äî 5 —à—Ç., –≤–æ–∑–º.–¥–æ–≥—Ä—É–∑

–í—Å–µ –∑–∞–∫—Ä.+–∏–∑–æ—Ç–µ—Ä–º
–ó–∞–≥—Ä—É–∑–∫–∞, –≤—ã–≥—Ä—É–∑–∫–∞: –∑–∞–¥–Ω—è—è

20000 —Ä—É–±  –° –ù–î–° (19.9 —Ä—É–±/–∫–º)
16000 —Ä—É–±  –ë–µ–∑ –ù–î–° (15.9 —Ä—É–±/–∫–º)
–ë–µ–∑ —Ç–æ—Ä–≥–∞

–§–ò–†–ú–ê: –ì–ö –ò–∂—Å–∏–Ω—Ç–µ–∑ (–°–æ–ª–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞, –û–û–û), –ò–∂–µ–≤—Å–∫
–ö–æ–¥ –≤ ATI.SU: 453700
—Ä–µ–π—Ç–∏–Ω–≥: 5 , —Ä131

–ê–Ω–¥—Ä–µ–π 
—Ç–µ–ª: +7(909)0607745 –ë–∏–ª–∞–π–Ω
—Ç–µ–ª: +7(912)7425245 –ú–¢–°
e-mail: miroshkin.av@izhsintez.ru
—Ñ–∞–∫—Å +7 (3412) 507607

–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–∑:
https://loads.ati.su/loadinfo/49e65551-a7a9-4af9-815f-84d269dbcda0?utm_source=atiapp
791"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –ü–∞—Ä—Å–∏–º –∑–∞—è–≤–∫—É
    order_data = parse_telegram_order(test_text)
    if order_data:
        print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for key, value in order_data.items():
            print(f"  {key}: {value}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        if create_order_in_app(order_data):
            print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏")
