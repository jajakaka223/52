const jwt = require('jsonwebtoken');
const { logUserAction, logError } = require('../utils/logger');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];

    console.log('üîç Auth token check:', {
      hasAuthHeader: !!authHeader,
      hasToken: !!token,
      url: req.url
    });

    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    jwt.verify(token, process.env.JWT_SECRET || 'default_secret', (err, decoded) => {
      if (err) {
        console.log('‚ùå JWT verification error:', err.message);
        if (err.name === 'TokenExpiredError') {
          return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫' });
        }
        return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' });
      }

      console.log('‚úÖ JWT verified for user:', decoded.userId, 'role:', decoded.role);
      req.user = decoded;
      next();
    });

  } catch (error) {
    console.log('‚ùå Error in authenticateToken:', error.message);
    logError(error, { middleware: 'authenticateToken', headers: req.headers });
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞' });
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    if (req.user.role !== 'admin') {
      logUserAction(req.user.userId, 'access_denied', {
        route: req.originalUrl,
        userRole: req.user.role,
        requiredRole: 'admin'
      }, req.ip);

      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    next();

  } catch (error) {
    logError(error, { middleware: 'requireAdmin', user: req.user });
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è
const requireDriver = (req, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    if (req.user.role !== 'driver' && req.user.role !== 'admin') {
      logUserAction(req.user.userId, 'access_denied', {
        route: req.originalUrl,
        userRole: req.user.role,
        requiredRole: 'driver'
      }, req.ip);

      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –≤–æ–¥–∏—Ç–µ–ª—è' });
    }

    next();

  } catch (error) {
    logError(error, { middleware: 'requireDriver', user: req.user });
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
  }
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const logRequest = (req, res, next) => {
  if (req.user) {
    logUserAction(req.user.userId, 'api_request', {
      method: req.method,
      route: req.originalUrl,
      body: req.body,
      query: req.query
    }, req.ip);
  }
  next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const checkUserActive = async (req, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    console.log('üîç Checking user active status for user:', req.user.userId);
    
    const { pool } = require('../config/database');
    const userCheck = await pool.query(
      'SELECT is_active FROM users WHERE id = $1',
      [req.user.userId]
    );

    console.log('üîç User check result:', userCheck.rows);

    if (userCheck.rows.length === 0 || !userCheck.rows[0].is_active) {
      return res.status(403).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' });
    }

    next();

  } catch (error) {
    console.log('‚ùå Error in checkUserActive:', error.message);
    logError(error, { middleware: 'checkUserActive', user: req.user });
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
};

module.exports = {
  authenticateToken,
  requireAdmin,
  requireDriver,
  logRequest,
  checkUserActive,
  logUserAction,
  logError
};
