#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –≤ SQL —Ñ–∞–π–ª
 * –ó–∞–ø—É—Å–∫: node export-local-data.js
 */

const { Pool } = require('pg');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const localConfig = {
  host: 'localhost',
  port: 5432,
  database: 'transport_company',
  user: 'postgres',
  password: 'your_password' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
};

console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã...');

async function exportData() {
  const localPool = new Pool(localConfig);

  try {
    const client = await localPool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const tables = [
      'roles',
      'users', 
      'vehicles',
      'orders',
      'gps_tracking',
      'accounting',
      'vehicle_maintenance_history',
      'role_permissions',
      'notifications'
    ];

    let sqlContent = '-- –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã\n';
    sqlContent += '-- –°–æ–∑–¥–∞–Ω–æ: ' + new Date().toISOString() + '\n\n';

    for (const table of tables) {
      try {
        console.log(`üìã –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: ${table}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const result = await client.query(`SELECT * FROM ${table}`);
        const rows = result.rows;
        
        if (rows.length === 0) {
          console.log(`   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${table} –ø—É—Å—Ç–∞`);
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        const columns = Object.keys(rows[0]);
        const columnNames = columns.join(', ');

        sqlContent += `-- –¢–∞–±–ª–∏—Ü–∞: ${table}\n`;
        sqlContent += `-- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${rows.length}\n\n`;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º INSERT –∑–∞–ø—Ä–æ—Å—ã
        for (const row of rows) {
          const values = columns.map(col => {
            const value = row[col];
            if (value === null) return 'NULL';
            if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
            if (typeof value === 'boolean') return value ? 'TRUE' : 'FALSE';
            return value;
          }).join(', ');

          sqlContent += `INSERT INTO ${table} (${columnNames}) VALUES (${values}) ON CONFLICT DO NOTHING;\n`;
        }

        sqlContent += '\n';
        console.log(`   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${rows.length} –∑–∞–ø–∏—Å–µ–π`);

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${table}:`, error.message);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const filename = `local-data-export-${new Date().toISOString().split('T')[0]}.sql`;
    fs.writeFileSync(filename, sqlContent);
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
  } finally {
    await localPool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
exportData().catch(console.error);
