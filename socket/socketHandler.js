const jwt = require('jsonwebtoken');
const { logUserAction, logGPSData, logError } = require('../utils/logger');

module.exports = (io) => {
  // Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Socket.io
  io.use((socket, next) => {
    try {
      const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.split(' ')[1];
      
      if (!token) {
        return next(new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
      }

      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default_secret');
      socket.user = decoded;
      next();
    } catch (error) {
      next(new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'));
    }
  });

  io.on('connection', (socket) => {
    try {
      const { userId, username, role } = socket.user;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      logUserAction(userId, 'socket_connected', {
        username,
        role,
        socketId: socket.id
      });

      // –í–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
      if (role === 'driver') {
        socket.join(`driver_${userId}`);
        socket.join('all_drivers');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.emit('connected', {
          message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
          userId,
          role
        });

        console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å ${username} (ID: ${userId}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞`);

      } else if (role === 'admin') {
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        socket.join('admin_monitoring');
        
        socket.emit('connected', {
          message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
          userId,
          role
        });

        console.log(`üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π
      socket.on('gps_update', async (data) => {
        try {
          if (role !== 'driver') {
            socket.emit('error', { message: '–¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å GPS –¥–∞–Ω–Ω—ã–µ' });
            return;
          }

          const { latitude, longitude, speed, heading, accuracy } = data;

          // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
          if (!latitude || !longitude) {
            socket.emit('error', { message: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
            return;
          }

          // –õ–æ–≥–∏—Ä—É–µ–º GPS –¥–∞–Ω–Ω—ã–µ
          logGPSData(userId, latitude, longitude, speed, heading);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GPS –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          socket.to('admin_monitoring').emit('driver_location_update', {
            driverId: userId,
            driverName: username,
            latitude,
            longitude,
            speed,
            heading,
            accuracy,
            timestamp: new Date().toISOString()
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
          socket.emit('gps_confirmed', {
            message: 'GPS –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
            timestamp: new Date().toISOString()
          });

        } catch (error) {
          logError(error, { 
            event: 'gps_update', 
            data, 
            userId, 
            socketId: socket.id 
          });
          socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPS –¥–∞–Ω–Ω—ã—Ö' });
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
      socket.on('order_status_update', (data) => {
        try {
          const { orderId, newStatus, orderDetails } = data;

          // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
          logUserAction(userId, 'order_status_changed_socket', {
            orderId,
            newStatus,
            orderDetails
          });

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
          socket.to('all_drivers').emit('order_status_changed', {
            orderId,
            newStatus,
            updatedBy: username,
            timestamp: new Date().toISOString()
          });

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          socket.to('admin_monitoring').emit('order_status_changed', {
            orderId,
            newStatus,
            updatedBy: username,
            timestamp: new Date().toISOString()
          });

        } catch (error) {
          logError(error, { 
            event: 'order_status_update', 
            data, 
            userId, 
            socketId: socket.id 
          });
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
      socket.on('new_order_created', (data) => {
        try {
          if (role !== 'admin') {
            socket.emit('error', { message: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏' });
            return;
          }

          const { orderId, driverId, orderDetails } = data;

          // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
          logUserAction(userId, 'new_order_created_socket', {
            orderId,
            driverId,
            orderDetails
          });

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
          if (driverId) {
            socket.to(`driver_${driverId}`).emit('new_order_assigned', {
              orderId,
              orderDetails,
              assignedBy: username,
              timestamp: new Date().toISOString()
            });
          }

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
          socket.to('all_drivers').emit('new_order_available', {
            orderId,
            orderDetails,
            timestamp: new Date().toISOString()
          });

        } catch (error) {
          logError(error, { 
            event: 'new_order_created', 
            data, 
            userId, 
            socketId: socket.id 
          });
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      socket.on('disconnect', () => {
        try {
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
          logUserAction(userId, 'socket_disconnected', {
            username,
            role,
            socketId: socket.id
          });

          if (role === 'driver') {
            console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å ${username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞`);
          } else if (role === 'admin') {
            console.log(`üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
          }

        } catch (error) {
          logError(error, { 
            event: 'disconnect', 
            userId, 
            socketId: socket.id 
          });
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      socket.on('error', (error) => {
        logError(error, { 
          event: 'socket_error', 
          userId, 
          socketId: socket.id 
        });
      });

    } catch (error) {
      logError(error, { 
        event: 'connection_error', 
        socketId: socket.id 
      });
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' });
    }
  });

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
  io.on('error', (error) => {
    logError(error, { event: 'io_error' });
  });

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º io –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
  global.io = io;
};
