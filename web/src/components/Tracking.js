import React, { useEffect, useRef, useState } from 'react';
import { Card, Typography, message, Button, Space, Table, Tag, Spin, Row, Col, Statistic } from 'antd';
import { ReloadOutlined, EnvironmentOutlined, ClockCircleOutlined, CarOutlined } from '@ant-design/icons';
import api from '../config/http';

const { Title } = Typography;

const Tracking = () => {
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É
  const toNumber = (value, fallback = 0) => {
    const n = typeof value === 'string' ? parseFloat(value) : value;
    return Number.isFinite(n) ? n : fallback;
  };

  const mapRef = useRef(null);
  const initializedRef = useRef(false);
  const mapInstanceRef = useRef(null);
  const markersRef = useRef([]);
  const resizeObserverRef = useRef(null);
  
  const [drivers, setDrivers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
  const loadDriversData = async () => {
    try {
      setLoading(true);
      const { data } = await api.get('/api/tracking/all-drivers');
      const raw = Array.isArray(data?.drivers) ? data.drivers : [];
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ (Postgres numeric –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π)
      const normalized = raw
        .map(d => ({
          ...d,
          latitude: toNumber(d.latitude, null),
          longitude: toNumber(d.longitude, null),
          speed: toNumber(d.speed, 0),
          accuracy: toNumber(d.accuracy, 0),
          timestamp: d.timestamp || Date.now(),
        }))
        .filter(d => Number.isFinite(d.latitude) && Number.isFinite(d.longitude));

      setDrivers(normalized);
      setLastUpdate(new Date());
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
      if (mapInstanceRef.current) {
        updateMapMarkers(normalized);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
      const detail = error?.response?.data?.error || error?.message || '';
      // –ß–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω
      if (error?.response?.status === 403) {
        message.error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
      } else if (error?.response?.status === 401) {
        message.error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.');
      } else {
        message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π' + (detail ? `: ${detail}` : ''));
      }
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
  const updateMapMarkers = (driversData) => {
    if (!mapInstanceRef.current || !window.ymaps) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏
    markersRef.current.forEach(marker => {
      mapInstanceRef.current.geoObjects.remove(marker);
    });
    markersRef.current = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∫–∏
    driversData.forEach(driver => {
      const lat = toNumber(driver.latitude, null);
      const lng = toNumber(driver.longitude, null);
      if (!Number.isFinite(lat) || !Number.isFinite(lng)) return;
      const spd = toNumber(driver.speed, 0);
      const acc = toNumber(driver.accuracy, 0);
      const marker = new window.ymaps.Placemark(
        [lat, lng],
        {
          balloonContent: `
            <div>
              <h3>${driver.full_name || driver.username}</h3>
              <p><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${spd.toFixed(1)} –∫–º/—á</p>
              <p><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> ${acc.toFixed(1)} –º</p>
              <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(driver.timestamp || Date.now()).toLocaleString('ru-RU')}</p>
            </div>
          `,
          iconCaption: driver.full_name || driver.username
        },
        {
          preset: 'islands#redCarIcon',
          iconColor: spd > 0 ? '#ff6b6b' : '#52d66b'
        }
      );
      
      mapInstanceRef.current.geoObjects.add(marker);
      markersRef.current.push(marker);
    });

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è—Ö
    if (driversData.length > 0) {
      const points = driversData
        .map(d => [toNumber(d.latitude, null), toNumber(d.longitude, null)])
        .filter(([lat, lng]) => Number.isFinite(lat) && Number.isFinite(lng));

      const TARGET_ZOOM = 16; // ~100 –º —à–∫–∞–ª–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö

      if (points.length === 1) {
        // –î–ª—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º setBounds (–æ–Ω —É—Ö–æ–¥–∏—Ç –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º)
        try {
          mapInstanceRef.current.setCenter(points[0], TARGET_ZOOM, { checkZoomRange: true });
        } catch (_) {}
      } else {
        const bounds = window.ymaps.util.bounds.fromPoints(points);
        mapInstanceRef.current.setBounds(bounds, { checkZoomRange: true, zoomMargin: 80 });
        // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –∑—É–º
        try { mapInstanceRef.current.setZoom(TARGET_ZOOM, { duration: 0 }); } catch (_) {}
      }
    }
  };

  const initMap = async () => {
    if (initializedRef.current) return;
    try {
      const { data } = await api.get('/api/utils/public-config');
      const apiKey = data?.yandexKey;
      if (!apiKey) {
        message.warning('Yandex Maps API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –∫–∞—Ä—Ç—ã.');
        if (mapRef.current) {
          mapRef.current.innerHTML = `
            <div style="
              height: 320px; 
              width: 100%; 
              background: #f5f5f5; 
              display: flex; 
              align-items: center; 
              justify-content: center; 
              border: 2px dashed #d9d9d9;
              color: #666;
              font-size: 16px;
              text-align: center;
              overflow: hidden;
            ">
              <div>
                <div style="font-size: 24px; margin-bottom: 10px;">üó∫Ô∏è</div>
                <div>–ö–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
                <div style="font-size: 12px; margin-top: 5px;">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ YANDEX_MAPS_API_KEY –≤ Railway</div>
              </div>
            </div>
          `;
        }
        return;
      }

      await new Promise((resolve, reject) => {
        if (window.ymaps) return resolve();
        const existing = document.getElementById('ymaps-sdk');
        if (existing) return existing.addEventListener('load', resolve);
        const s = document.createElement('script');
        s.id = 'ymaps-sdk';
        s.src = `https://api-maps.yandex.ru/2.1/?lang=ru_RU&apikey=${apiKey}`;
        s.onload = () => resolve();
        s.onerror = () => reject(new Error('YM load failed'));
        document.body.appendChild(s);
      });

      window.ymaps.ready(() => {
        if (mapRef.current) {
          mapRef.current.innerHTML = '';
        }
        mapInstanceRef.current = new window.ymaps.Map(mapRef.current, {
          center: [55.751244, 37.618423],
          zoom: 16
        });
        initializedRef.current = true;
        
        // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ª–µ–≤–æ–≥–æ —Å–∞–π–¥–±–∞—Ä–∞)
        try {
          if (window.ResizeObserver && mapRef.current) {
            resizeObserverRef.current = new ResizeObserver(() => {
              try { mapInstanceRef.current?.container.fitToViewport(); } catch (_) {}
            });
            resizeObserverRef.current.observe(mapRef.current);
          } else {
            // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —Å–ª—É—à–∞—Ç–µ–ª—å –æ–∫–Ω–∞
            window.addEventListener('resize', () => {
              try { mapInstanceRef.current?.container.fitToViewport(); } catch (_) {}
            });
          }
        } catch (_) {}
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
        loadDriversData();
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      message.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É');
    }
  };

  useEffect(() => { initMap(); }, []);

  // –û—á–∏—Å—Ç–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      try { resizeObserverRef.current?.disconnect(); } catch (_) {}
    };
  }, []);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const interval = setInterval(() => {
      if (initializedRef.current) {
        loadDriversData();
      }
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const columns = [
    {
      title: '–í–æ–¥–∏—Ç–µ–ª—å',
      dataIndex: 'full_name',
      key: 'name',
      render: (text, record) => (
        <span style={{ whiteSpace: 'nowrap' }}>{text || record.username}</span>
      ),
    },
    {
      title: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
      key: 'coordinates',
      render: (_, record) => (
        <Space wrap={false}>
          <EnvironmentOutlined />
          <span style={{ whiteSpace: 'nowrap' }}>
            {toNumber(record.latitude, 0).toFixed(6)}, {toNumber(record.longitude, 0).toFixed(6)}
          </span>
        </Space>
      ),
    },
    {
      title: '–°–∫–æ—Ä–æ—Å—Ç—å',
      dataIndex: 'speed',
      key: 'speed',
      render: (speed) => {
        const spd = toNumber(speed, 0);
        return (
        <Tag color={speed > 0 ? 'red' : 'green'} style={{ whiteSpace: 'nowrap' }}>
          {spd.toFixed(1)} –∫–º/—á
        </Tag>
        );
      },
    },
    {
      title: '–¢–æ—á–Ω–æ—Å—Ç—å',
      dataIndex: 'accuracy',
      key: 'accuracy',
      render: (accuracy) => (
        <span style={{ whiteSpace: 'nowrap' }}>{toNumber(accuracy, 0).toFixed(1)} –º</span>
      ),
    },
    {
      title: '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
      dataIndex: 'timestamp',
      key: 'timestamp',
      render: (timestamp) => (
        <Space wrap={false}>
          <ClockCircleOutlined />
          <span style={{ whiteSpace: 'nowrap' }}>{new Date(timestamp || Date.now()).toLocaleString('ru-RU')}</span>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
        <Title level={2}>GPS –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</Title>
        <Space>
          <Button 
            type="primary" 
            icon={<ReloadOutlined />} 
            onClick={loadDriversData}
            loading={loading}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </Space>
      </div>

      <Row gutter={16} style={{ marginBottom: 12 }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π"
              value={drivers.length}
              prefix={<CarOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="–í –¥–≤–∏–∂–µ–Ω–∏–∏"
              value={drivers.filter(d => d.speed > 0).length}
              prefix={<CarOutlined />}
              valueStyle={{ color: '#ff6b6b' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="–ù–∞ –º–µ—Å—Ç–µ"
              value={drivers.filter(d => d.speed === 0 || !d.speed).length}
              prefix={<CarOutlined />}
              valueStyle={{ color: '#52d66b' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
              value={lastUpdate ? lastUpdate.toLocaleTimeString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              prefix={<ClockCircleOutlined />}
            />
          </Card>
        </Col>
      </Row>
      {/* –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–≤–µ—Ä—Ö—É, –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
      <Row gutter={16} style={{ marginBottom: 12 }}>
        <Col span={24}>
          <Card title="–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π" style={{ overflow: 'hidden' }}>
            <Table
              dataSource={drivers}
              columns={columns}
              pagination={false}
              size="small"
              scroll={{ x: true }}
              loading={loading}
              rowKey="id"
            />
          </Card>
        </Col>
      </Row>

      {/* –ö–∞—Ä—Ç–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ –∫–∞—Ä—Ç–µ */}
      <Row gutter={16}>
        <Col span={24}>
          <Card title="–ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π" bodyStyle={{ padding: 0 }} style={{ overflow: 'hidden' }}>
            <div ref={mapRef} style={{ height: 520, width: '100%', overflow: 'hidden' }} />
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default Tracking;
