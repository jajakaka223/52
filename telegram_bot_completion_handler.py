#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ –¥–ª—è –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç
"""

import asyncio
import aiohttp
import json
from datetime import datetime

async def send_completion_email(email_address, route_info, order_data=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    
    Args:
        email_address (str): email –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        route_info (str): –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
        order_data (dict): –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    BOT_TOKEN = "7569282805:AAFQHAX-moIoTpVSLvNpOXWtrVbwepr31iE"
    CHAT_ID = "YOUR_CHAT_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"""üéâ **–ó–ê–Ø–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê!**

üìß **Email –∫–ª–∏–µ–Ω—Ç–∞:** {email_address}
üõ£Ô∏è **–ú–∞—Ä—à—Ä—É—Ç:** {route_info}
üìÖ **–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

{order_data.get('orderId', '') and f"üÜî **ID –∑–∞—è–≤–∫–∏:** {order_data['orderId']}"}
{order_data.get('company', '') and f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {order_data['company']}"}
{order_data.get('clientName', '') and f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {order_data['clientName']}"}
{order_data.get('phone', '') and f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {order_data['phone']}"}

**–î–µ–π—Å—Ç–≤–∏–µ:** –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é

---
üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:**
- –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
- –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ
- –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –Ω–∞—Å –¥—Ä—É–∑—å—è–º –∏ –∫–æ–ª–ª–µ–≥–∞–º
- –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
- Email: info@yourcompany.com
- –°–∞–π—Ç: yourcompany.com"""

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            
            data = {
                'chat_id': CHAT_ID,
                'text': message_text,
                'parse_mode': 'Markdown',
                'reply_markup': json.dumps({
                    'inline_keyboard': [
                        [
                            {
                                'text': 'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –∫–ª–∏–µ–Ω—Ç—É',
                                'callback_data': f'send_email_{email_address}'
                            }
                        ],
                        [
                            {
                                'text': 'üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤',
                                'callback_data': f'request_review_{email_address}'
                            }
                        ],
                        [
                            {
                                'text': '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ',
                                'callback_data': f'mark_processed_{email_address}'
                            }
                        ]
                    ]
                })
            }
            
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {result['result']['message_id']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞—à–µ–º –±–æ—Ç–µ
async def handle_completion_notification(update, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
    –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –≤–∞—à –±–æ—Ç
    """
    try:
        message = update.message
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
        if "–ó–ê–Ø–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê!" in text and "Email –∫–ª–∏–µ–Ω—Ç–∞:" in text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            lines = text.split('\n')
            email = None
            route = None
            
            for line in lines:
                if line.startswith('üìß **Email –∫–ª–∏–µ–Ω—Ç–∞:**'):
                    email = line.replace('üìß **Email –∫–ª–∏–µ–Ω—Ç–∞:**', '').strip()
                elif line.startswith('üõ£Ô∏è **–ú–∞—Ä—à—Ä—É—Ç:**'):
                    route = line.replace('üõ£Ô∏è **–ú–∞—Ä—à—Ä—É—Ç:**', '').strip()
            
            if email and route:
                print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ:")
                print(f"   Email: {email}")
                print(f"   –ú–∞—Ä—à—Ä—É—Ç: {route}")
                
                # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –∫–ª–∏–µ–Ω—Ç—É, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            else:
                await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
async def handle_callback_query(update, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    """
    query = update.callback_query
    data = query.data
    
    if data.startswith('send_email_'):
        email = data.replace('send_email_', '')
        await query.answer(f"–û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ {email}...")
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        
    elif data.startswith('request_review_'):
        email = data.replace('request_review_', '')
        await query.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ—Ç {email}...")
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞
        
    elif data.startswith('mark_processed_'):
        email = data.replace('mark_processed_', '')
        await query.answer(f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–ª—è {email}")
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ

# –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ
def setup_completion_handlers(application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ
    –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—é main() –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    """
    from telegram.ext import MessageHandler, CallbackQueryHandler, filters
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'–ó–ê–Ø–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê!'), 
        handle_completion_notification
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback_query))

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    async def test():
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_email = "client@example.com"
        test_route = "–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        test_order_data = {
            'orderId': '12345',
            'company': '–û–û–û –¢–µ—Å—Ç',
            'clientName': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            'phone': '+7(999)123-45-67'
        }
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        result = await send_completion_email(test_email, test_route, test_order_data)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test())
