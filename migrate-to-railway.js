#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –≤ Railway
 * –ó–∞–ø—É—Å–∫: node migrate-to-railway.js
 */

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const localConfig = {
  host: 'localhost',
  port: 5432,
  database: 'transport_company',
  user: 'postgres',
  password: 'admin' // –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const railwayConfig = {
  host: process.env.DB_HOST || process.env.DATABASE_URL ? new URL(process.env.DATABASE_URL).hostname : 'postgres.railway.internal',
  port: process.env.DB_PORT || process.env.DATABASE_URL ? new URL(process.env.DATABASE_URL).port : 5432,
  database: process.env.DB_NAME || process.env.DATABASE_URL ? new URL(process.env.DATABASE_URL).pathname.slice(1) : 'transport_company',
  user: process.env.DB_USER || process.env.DATABASE_URL ? new URL(process.env.DATABASE_URL).username : 'postgres',
  password: process.env.DB_PASSWORD || process.env.DATABASE_URL ? new URL(process.env.DATABASE_URL).password : 'GxebDCtEXaMnwEHatMMDtgfqXefjQfFr'
};

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ Railway...');
console.log('üìä –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î:', localConfig.host + ':' + localConfig.port + '/' + localConfig.database);
console.log('‚òÅÔ∏è Railway –ë–î:', railwayConfig.host + ':' + railwayConfig.port + '/' + railwayConfig.database);

async function migrateData() {
  const localPool = new Pool(localConfig);
  const railwayPool = new Pool(railwayConfig);

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ...');
    const localClient = await localPool.connect();
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Railway
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway...');
    const railwayClient = await railwayPool.connect();
    console.log('‚úÖ Railway –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
    const tables = [
      'roles',
      'users', 
      'vehicles',
      'orders',
      'gps_tracking',
      'accounting',
      'vehicle_maintenance_history',
      'role_permissions',
      'notifications'
    ];

    for (const table of tables) {
      try {
        console.log(`üìã –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: ${table}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const result = await localClient.query(`SELECT * FROM ${table}`);
        const rows = result.rows;
        
        if (rows.length === 0) {
          console.log(`   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${table} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        const columns = Object.keys(rows[0]);
        const columnNames = columns.join(', ');
        const placeholders = columns.map((_, i) => `$${i + 1}`).join(', ');

        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Railway (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        await railwayClient.query(`DELETE FROM ${table}`);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Railway
        for (const row of rows) {
          const values = columns.map(col => row[col]);
          const query = `INSERT INTO ${table} (${columnNames}) VALUES (${placeholders}) ON CONFLICT DO NOTHING`;
          await railwayClient.query(query, values);
        }

        console.log(`   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${rows.length} –∑–∞–ø–∏—Å–µ–π –≤ ${table}`);
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${table}:`, error.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
      }
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const userCount = await railwayClient.query('SELECT COUNT(*) FROM users');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Railway: ${userCount.rows[0].count}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await localPool.end();
    await railwayPool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateData().catch(console.error);
