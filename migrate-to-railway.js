const { Pool } = require('pg');
const fs = require('fs');
require('dotenv').config();

// –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const localPool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'transport_company',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'your_password',
});

// Railway –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const railwayPool = new Pool({
  connectionString: process.env.DATABASE_URL || process.env.DATABASE_PUBLIC_URL,
  ssl: process.env.DATABASE_PUBLIC_URL ? { rejectUnauthorized: false } : undefined,
});

async function exportData() {
  console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = ['users', 'vehicles', 'orders', 'expenses', 'reports'];
    const data = {};
    
    for (const table of tables) {
      try {
        const result = await localPool.query(`SELECT * FROM ${table}`);
        data[table] = result.rows;
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: ${result.rows.length} –∑–∞–ø–∏—Å–µ–π`);
      } catch (err) {
        console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${table}: ${err.message}`);
        data[table] = [];
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync('data-export.json', JSON.stringify(data, null, 2));
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ data-export.json');
    
    return data;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', err.message);
    throw err;
  }
}

async function importData(data) {
  console.log('üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Railway...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ Railway
    const tables = ['reports', 'expenses', 'orders', 'vehicles', 'users'];
    for (const table of tables) {
      try {
        await railwayPool.query(`DELETE FROM ${table}`);
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –æ—á–∏—â–µ–Ω–∞`);
      } catch (err) {
        console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å ${table}: ${err.message}`);
      }
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for (const table of tables) {
      if (data[table] && data[table].length > 0) {
        for (const row of data[table]) {
          try {
            const columns = Object.keys(row);
            const values = Object.values(row);
            const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');
            
            const query = `INSERT INTO ${table} (${columns.join(', ')}) VALUES (${placeholders})`;
            await railwayPool.query(query, values);
          } catch (err) {
            console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ ${table}: ${err.message}`);
          }
        }
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data[table].length} –∑–∞–ø–∏—Å–µ–π`);
      }
    }
    
    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', err.message);
    throw err;
  }
}

async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ...');
    await localPool.query('SELECT 1');
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway...');
    await railwayPool.query('SELECT 1');
    console.log('‚úÖ Railway –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = await exportData();
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await importData(data);
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', err.message);
  } finally {
    await localPool.end();
    await railwayPool.end();
  }
}

main();

