#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
from datetime import datetime
from typing import Dict, Optional

class TransportCompanyAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    def __init__(self, api_url: str, username: str, password: str):
        self.api_url = api_url.rstrip('/')
        self.username = username
        self.password = password
        self.auth_token = None
        
    def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API"""
        try:
            response = requests.post(f"{self.api_url}/api/auth/login", json={
                "username": self.username,
                "password": self.password
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get('token')
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
    
    def create_order(self, order_data: Dict) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API"""
        if not self.auth_token:
            if not self.authenticate():
                return None
        
        try:
            headers = {
                "Authorization": f"Bearer {self.auth_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(
                f"{self.api_url}/api/orders",
                json=order_data,
                headers=headers
            )
            
            if response.status_code in [200, 201]:
                data = response.json()
                order_id = data.get('order', {}).get('id') if 'order' in data else data.get('id')
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {order_id}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    def parse_order_from_text(self, text: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à —Ñ–æ—Ä–º–∞—Ç)"""
        import re
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            direction_match = re.search(r'–ì—Ä—É–∑:\s*([^‚Üí]+)‚Üí\s*([^\n]+)', text)
            if not direction_match:
                return None
            
            from_city = direction_match.group(1).strip()
            to_city = direction_match.group(2).strip()
            direction = f"{from_city} ‚Üí {to_city}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å
            weight_match = re.search(r'(\d+\.?\d*)\s*—Ç', text)
            weight = float(weight_match.group(1)) if weight_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–µ–∑ –ù–î–°, –∑–∞—Ç–µ–º —Å –ù–î–°)
            amount = None
            amount_match = re.search(r'(\d+)\s*—Ä—É–±\s*–ë–µ–∑ –ù–î–°', text)
            if not amount_match:
                amount_match = re.search(r'(\d+)\s*—Ä—É–±\s*–° –ù–î–°', text)
            if amount_match:
                amount = float(amount_match.group(1))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            company_match = re.search(r'–§–ò–†–ú–ê:\s*([^\n]+)', text)
            company = company_match.group(1).strip() if company_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
            name_match = re.search(r'—Ä–µ–π—Ç–∏–Ω–≥:[^\n]*\n([–ê-–Ø–∞-—è—ë–Å\s]+)\s*\n—Ç–µ–ª:', text)
            client_name = name_match.group(1).strip() if name_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            phone_match = re.search(r'—Ç–µ–ª:\s*([+\d\s\(\)\-]+)', text)
            phone = phone_match.group(1).strip() if phone_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º email
            email_match = re.search(r'e-mail:\s*([^\s]+)', text)
            email = email_match.group(1).strip() if email_match else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã (–≤ –∫–æ–Ω—Ü–µ)
            vehicle_match = re.search(r'(\d{3})\s*$', text.strip())
            vehicle_number = vehicle_match.group(1) if vehicle_match else None
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
            details = []
            if weight:
                details.append(f"–í–µ—Å: {weight} —Ç")
            if vehicle_number:
                details.append(f"–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {vehicle_number}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ
            if '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã' in text:
                details.append("–ì—Ä—É–∑: –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
            
            details_text = "\n".join(details) if details else "–î–µ—Ç–∞–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
            
            return {
                "date": datetime.now().strftime("%Y-%m-%d"),
                "direction": direction,
                "weight": weight,
                "amount": amount,
                "company": company,
                "clientName": client_name,
                "phone": phone,
                "email": email,
                "details": details_text
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏: {e}")
            return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
    API_URL = "https://web-production-7cfec.up.railway.app"
    USERNAME = "admin"
    PASSWORD = "admin"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    api_client = TransportCompanyAPI(API_URL, USERNAME, PASSWORD)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    test_text = """–ì—Ä—É–∑: –ò–∂–µ–≤—Å–∫ ‚Üí –í–ª–∞–¥–∏–º–∏—Ä

RUS, 1005 –∫–º
‚Ä¢ –ò–∂–µ–≤—Å–∫, –†–æ—Å—Å–∏—è, 12 —Å–µ–Ω, –ø—Ç
‚Ä¢ –í–ª–∞–¥–∏–º–∏—Ä (235 –∫–º –æ—Ç –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –†–æ—Å—Å–∏—è), –†–æ—Å—Å–∏—è

2.6 —Ç / - 
–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–∞–ª–µ—Ç—ã ‚Äî 5 —à—Ç., –≤–æ–∑–º.–¥–æ–≥—Ä—É–∑

–í—Å–µ –∑–∞–∫—Ä.+–∏–∑–æ—Ç–µ—Ä–º
–ó–∞–≥—Ä—É–∑–∫–∞, –≤—ã–≥—Ä—É–∑–∫–∞: –∑–∞–¥–Ω—è—è

20000 —Ä—É–±  –° –ù–î–° (19.9 —Ä—É–±/–∫–º)
16000 —Ä—É–±  –ë–µ–∑ –ù–î–° (15.9 —Ä—É–±/–∫–º)
–ë–µ–∑ —Ç–æ—Ä–≥–∞

–§–ò–†–ú–ê: –ì–ö –ò–∂—Å–∏–Ω—Ç–µ–∑ (–°–æ–ª–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞, –û–û–û), –ò–∂–µ–≤—Å–∫
–ö–æ–¥ –≤ ATI.SU: 453700
—Ä–µ–π—Ç–∏–Ω–≥: 5 , —Ä131

–ê–Ω–¥—Ä–µ–π 
—Ç–µ–ª: +7(909)0607745 –ë–∏–ª–∞–π–Ω
—Ç–µ–ª: +7(912)7425245 –ú–¢–°
e-mail: miroshkin.av@izhsintez.ru
—Ñ–∞–∫—Å +7 (3412) 507607

–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–∑:
https://loads.ati.su/loadinfo/49e65551-a7a9-4af9-815f-84d269dbcda0?utm_source=atiapp
791"""
    
    # –ü–∞—Ä—Å–∏–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    order_data = api_client.parse_order_from_text(test_text)
    if order_data:
        print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for key, value in order_data.items():
            print(f"  {key}: {value}")
        
        result = api_client.create_order(order_data)
        if result:
            print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏")
